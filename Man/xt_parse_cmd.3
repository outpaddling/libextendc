\" Generated by c2man from xt_parse_cmd.c
.TH xt_parse_cmd 3

.SH LIBRARY
\" Indicate #includes, library name, -L and -l flags
.nf
.na
#include <xtend/proc.h>
-lxtend
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf
.na
char    *xt_parse_cmd(char *argv[], int max_args, const char *cmd)
.ad
.fi

.SH ARGUMENTS
.nf
.na
argv:   Pointer array to be filled with command tokens
cmd:    Raw command string with limited meta-character support
from strshellcpy(3)
.ad
.fi

.SH DESCRIPTION

This function redirects the stdin, stdout, and stderr of the current
process to the files named by the corresponding arguments.  The original
file streams are not preserved.  If you need to restore any of these
streams to their original state, they must be saved (e.g. using dup(),
dup2(), or ttyname()) prior to calling xt_redirect().

Author:
Jason W. Bacon
***************************************************************************/

void    xt_redirect(
char    *infile,    /* If not NULL, stdin is redirected from this file */
char    *outfile,   /* If not NULL, stdout is redirected to this file */
char    *errfile    /* If not NULL, stderr is redirected to this file */
)

{
if (infile != NULL)
{
close(0);
if ( open(infile, O_RDONLY) == -1 )
fprintf(stderr,"xt_redirect(): Cannot open infile: %s.n",infile);
}
if (outfile != NULL)
{
close(1);
if ( open(outfile, O_WRONLY | O_CREAT | O_TRUNC, 0600) == -1 )
fprintf(stderr,"xt_redirect(): Cannot open outfile: %s.n",outfile);
}
if (errfile != NULL)
{
close(2);
if ( strcmp(errfile,outfile) == 0 )
{
if ( dup(1) == -1 )
fprintf(stderr,"xt_redirect(): Cannot open errfile: %s.n",errfile);
}
else
{
if ( open(errfile, O_WRONLY | O_CREAT | O_TRUNC, 0600) == -1 )
fprintf(stderr,"xt_redirect(): Cannot open errfile: %s.n",errfile);
}
}
}


Breaks a shell command into an argv[] style array suitable
for xt_spawnvp() or execv*().  A copy of cmd is created using
strshellcpy(), which expands certain shell features such as
variables and paths starting with '~'.  The copy is then
modified by replacing separators with '0' and the argv[] array
is populated with pointers to each token in the copy.

.SH RETURN VALUES

Pointer to strdup() copy of cmd, which should be freed as soon
as possible when argv[] is no longer needed.

.SH EXAMPLES
.nf
.na

char *cmd, *argv[], *expanded_cmd;

expanded_cmd = xt_parse_cmd(argv, cmd);
xt_spawnvp(P_WAIT, P_NOECHO, argv, NULL, NULL, NULL);
free(expanded_cmd);
.ad
.fi

.SH SEE ALSO

xt_spawnvp(3), xt_spawnlp(3), exec(3)

