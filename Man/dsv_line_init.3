\" Generated by c2man from dsv_line_init.c
.TH dsv_line_init 3

.SH NAME

dsv_line_init() - Initialize generic tabular data object

.SH LIBRARY
\" Indicate #includes, library name, -L and -l flags
.nf
.na
#include <xtend/dsv.h>
-lxtend
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.nf
.na
void    dsv_line_init(dsv_line_t *dsv_line)
.ad
.fi

.SH ARGUMENTS
.nf
.na
dsv_line    Pointer to a dsv_lint_t object.
.ad
.fi

.SH DESCRIPTION

Initialize a dsv_line_t structure.
The dsv_line_t structure contains an array of strings, each
holding one field from the line, and an an array of delimiters,
each holding the character that ended the corresponding field.
Note that each field could potentially end with a different
delimiter, as multiple delimiters can be specified.

Normally does not need to be called explicitly, since it is
called by dsv_line_new().

.SH EXAMPLES
.nf
.na

dsv_line_t  *line = dsv_line_new();

while ( dsv_line_read(line, stdin, "t") != EOF )
{
    dsv_line_write(line, stdout);
    dsv_line_free(line);
}

// Reinitialize
dsv_line_init(line);
.ad
.fi

.SH SEE ALSO

dsv_line_new(3), dsv_line_free(3),
dsv_line_read(3), dsv_line_write(3), dsv_line_copy(3),
dsv_read_field(3), dsv_read_field_malloc(3),
dsv_skip_field(3), dsv_skip_rest_of_line(3)

