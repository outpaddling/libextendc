\" Generated by c2man from ffpopen.c
.TH ffpopen 3

.SH LIBRARY
\" Indicate #includes, library name, -L and -l flags
.nf
.na
#include <xtend/fast-file.h>
-lxtend
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf
.na
ffile_t *ffpopen(const char *cmd, int flags)
.ad
.fi

.SH ARGUMENTS
.nf
.na
cmd     Full command to execute as the child, passed to sh(1)
flags   Open mode flags passed to open(3)
.ad
.fi

.SH DESCRIPTION

.B ffpopen(3)
creates a pipe for interprocess communication, runs the specified
command, connecting the command's standard input or standard
output to the pipe, and returning a pointer to a ffile_t object
connected to the other end.

It behaves much like popen(3), except that it returns a fast-file
fffile_t pointer rather than a standard I/O FILE pointer, and
accepts a full set of open(3) flags rather than the fopen(3)
type strings "r", "w", etc.

This allows the calling program to spawn a child process
and read its standard output or write to its standard input as
easily as reading or writing a file.

The stream should be closed with ffpclose(3) rather than ffclose(3)
in order to wait for the child process to complete and return its
exit status.

.SH RETURN VALUES

Pointer to a ffile_t object on success, NULL otherwise

.SH EXAMPLES
.nf
.na

ffile_t *instream;

if ( (instream = ffpopen("xzcat file.xz", O_RDONLY)) == NULL )
{
    fprintf(stderr, "Failed to read xzcat file.xz.n");
    exit(EX_NOINPUT);
}

ffpclose(instream);
.ad
.fi

.SH SEE ALSO

ffopen(3), ffpclose(3), popen(3), open(3)

