\" Generated by c2man from xt_ff_popen.c
.TH xt_ff_popen 3

.SH LIBRARY
\" Indicate #includes, library name, -L and -l flags
.nf
.na
#include <xtend/fast-file.h>
-lxtend
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf
.na
xt_ffile_t *xt_ff_popen(const char *cmd, int flags)
.ad
.fi

.SH ARGUMENTS
.nf
.na
cmd     Full command to execute as the child, passed to sh(1)
flags   Open mode flags passed to open(3)
.ad
.fi

.SH DESCRIPTION

.B xt_ff_popen(3)
creates a pipe for interprocess communication, runs the specified
command, connecting the command's standard input or standard
output to the pipe, and returning a pointer to a xt_ffile_t object
connected to the other end.

It behaves much like popen(3), except that it returns a fast-file
xt_fffile_t pointer rather than a standard I/O FILE pointer, and
accepts a full set of open(3) flags rather than the fopen(3)
type strings "r", "w", etc.

This allows the calling program to spawn a child process
and read its standard output or write to its standard input as
easily as reading or writing a file.

The stream should be closed with xt_ff_pclose(3) rather than xt_ff_close(3)
in order to wait for the child process to complete and return its
exit status.

The xt_ffile_t system is simpler than and several times as
fast as FILE on typical systems.  It is intended for processing
large files character-by-character, where low-level block I/O
is not convenient, but FILE I/O causes a bottleneck.

.SH RETURN VALUES

Pointer to a xt_ff_ile_t object on success, NULL otherwise

.SH EXAMPLES
.nf
.na

xt_ffile_t *instream;

if ( (instream = xt_ff_popen("xzcat file.xz", O_RDONLY)) == NULL )
{
    fprintf(stderr, "Failed to read xzcat file.xz.n");
    exit(EX_NOINPUT);
}

xt_ff_pclose(instream);
.ad
.fi

.SH SEE ALSO

xt_ff_open(3), xt_ff_pclose(3), popen(3), open(3)

